# Clustering
		<script src="https://d3js.org/d3.v7.min.js"></script>
		<script src="functions.js"></script>
		<style type="text/css">
		* {
			font-family: sans-serif;
			font-size: 12px;
		}
		</style>

## kmeans

	  <h1>Seven Points</h1>
	  <div id="plot"></div>
	  <button type="button" onclick="update_centroids(k)">Update centroids</button>
	  <button type="button" onclick="reassign_points()>Reassign points</button>
		// width and height
		const w = 400;
		const h = 400;
		const margin = {left: 50, right: 20, top: 20, bottom: 50};
		const innerHeight = h - margin.top - margin.bottom;
    const innerWidth = w - margin.left - margin.right;


		// create scale functions
		const xScale = d3.scaleLinear()
		.domain([0, 4])
		.range([0, innerWidth]);

		const yScale = d3.scaleLinear()
		.domain([0, 4])
		.range([innerHeight, 0]);

		const colors = d3.scaleOrdinal(d3.schemeCategory10);

		// define X axis
		const xAxis = d3.axisBottom()
		.scale(xScale)
		.ticks(5);

		// define Y axis
		const yAxis = d3.axisLeft()
		.scale(yScale)
		.ticks(5);

		// create SVG elements
		const svg = d3.select("div#plot")
		.append("svg")
		.attr("width", w)
		.attr("height", h);

		// create plot area
    svg.append("g")
      .attr("id", "plotarea")
      .attr("transform", `translate( ${margin.left}, ${margin.top} )`)

   // create x-axis
   svg.select("g#plotarea")
    .append("g")
    .attr("id", "xaxis")
    .attr("transform", `translate (0, ${innerHeight})`)
    .call(xAxis);

  // create x-axis label
  svg.select("g#plotarea")
    .append("text")
      .attr("id", "xlab")
      .attr("x", innerWidth/2)
      .attr("y", innerHeight + .75 * margin.bottom)
      .attr("text-anchor", "middle")
      .text("v1");

  // create y-axis
  svg.select("g#plotarea")
    .append("g")
    .attr("id", "yaxis")
    .call(yAxis);

  // create y-axis label
  svg.select("g#plotarea")
    .append("text")
      .attr("id", "ylab")
      .attr("x", -margin.left/2)
      .attr("y", innerHeight/2)
      .attr("text-anchor", "middle")
      .attr("transform", "rotate (-90, " + (0 - .75 * margin.left) + "," + innerHeight/2 + ")" )
      .text("v2");

    const colorScale = d3.scaleOrdinal(d3.schemeCategory10);

		let data = [
		  {x: 1, y: 2},
		  {x: 1.5, y: 2.2},
		  {x: 3, y: 1.3},
		  {x: 2.5, y: 1.1},
		  {x: .9, y: 2.1},
		  {x: 2, y: 1.5},
		  {x: 2.5, y: 1.4}
		  ]

//		  let data = d3.range(200).map(d => ({x: Math.random(), y: Math.random()}));

// number of clusters
    const k = 2;

  // randomly assign clusters

    data = data.map(d => ({x: d.x, y: d.y, cluster: d3.randomInt(k)()}));

  console.log(data);


// draw points
		svg.select("g#plotarea")
			.append("g").attr("id", "points").selectAll("circle")
		  .data(data)
			.enter()
			.append("circle")
				.attr("cx", d => xScale(d.x))
				.attr("cy", d => yScale(d.y))
				.attr("r", "2")
			  .style("fill", d => colorScale(d.cluster));

// set initial centroids

  let centroids = d3.range(k).map(d => ({x: -1, y: -1, cluster: -1})); // placeholders
    for(let j = 0; j < k; j++) {
      centroids[j].x = d3.mean(data.filter(d => d.cluster == j).map(d => d.x));
      centroids[j].y = d3.mean(data.filter(d => d.cluster == j).map(d => d.y));
      centroids[j].cluster = j;
  };

console.log(centroids);

// draw initial centroids
		svg.select("g#plotarea")
			.append("g").attr("id", "centroids").selectAll("circle")
		  .data(centroids)
			.enter()
			.append("circle")
				.attr("cx", d => xScale(d.x))
				.attr("cy", d => yScale(d.y))
				.attr("r", "10")
				.style("fill", d => colorScale(d.cluster))
				.attr("fill-opacity", ".5");

		</script>
