# Clustering 1
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="scripts/kmeans.js"></script>

## Kmeans: Seven points
<div id="plot"></div>
 
<button type="button" onclick="update_centroids()">Update centroids</button>
<button type="button" onclick="reassign_points()">Reassign points</button>

<script>
  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);

  let data = [
  {x: 1, y: 2},
  {x: 1.5, y: 2.2},
  {x: 3, y: 1.3},
  {x: 2.5, y: 1.1},
  {x: .9, y: 2.1},
  {x: 2, y: 1.5},
  {x: 2.5, y: 1.4}
  ]
  
// number of clusters
  const k = 2;  

// randomly assign clusters

  data = data.map(d => ({x: d.x, y: d.y, cluster: d3.randomInt(k)()}));

  let centroids = d3.range(k).map(e => 
    ({x: d3.mean(data.filter(d => d.cluster == e).map(d => d.x)),
      y: d3.mean(data.filter(d => d.cluster == e).map(d => d.y)),
      cluster: e})); 

  // width and height
  const w = 400;
  const h = 400;
  const margin = {left: 50, right: 20, top: 20, bottom: 50};
  const innerHeight = h - margin.top - margin.bottom;
  const innerWidth = w - margin.left - margin.right;
  
  // create scale functions
  const xScale = d3.scaleLinear()
    .domain([0, 4])
    .range([0, innerWidth]);

  const yScale = d3.scaleLinear()
    .domain([0, 4])
    .range([innerHeight, 0]);

  const colors = d3.scaleOrdinal(d3.schemeCategory10);

  // define X axis
  const xAxis = d3.axisBottom()
    .scale(xScale)
    .ticks(5);

  // define Y axis
  const yAxis = d3.axisLeft()
    .scale(yScale)
    .ticks(5);
    
  let svg;

  setup();
  
</script> 
